esphome:
  name: ${name}
esp32:
  board: seeed_xiao_esp32c3
logger:
  # disable logging on uart
  baud_rate: 0
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true
  ap: {}
captive_portal:
globals:
  - id: ota_mode
    type: bool
    initial_value: "false"
  - id: total_energy_p
    type: int
    restore_value: no
    initial_value: "0"
  - id: current_power_p
    type: int
    restore_value: no
    initial_value: "0"
  - id: battery_voltage_p
    type: int
    restore_value: no
    initial_value: "0"
ota:
  - platform: esphome
    password: !secret ota_password
# Enable Web server
web_server:
  port: 80
  local: true
  auth:
    username: !secret web_server_username
    password: !secret web_server_password
script:
  - id: check_all_published
    mode: restart
    then:
      - if:
          condition:
            lambda: return !id(ota_mode);
          then:
            - lambda: |-
                if (((id(total_energy_p) + id(current_power_p) + id(battery_voltage_p)) >= 6) && id(mqtt_client)->is_connected()) {
                  id(deep_sleep_1).set_run_duration(0);
                  id(deep_sleep_1).set_sleep_duration(1000 * 60 * 10); // 10 minutes
                  id(deep_sleep_1).begin_sleep();
                }
sensor:
  - platform: uptime
    name: Uptime
    update_interval: 3s
  - platform: wifi_signal
    name: Wifi Signal
    update_interval: 3s
  - platform: sml
    id: total_energy
    name: Total energy
    sml_id: mysml
    obis_code: 1-0:1.8.0
    unit_of_measurement: Wh
    accuracy_decimals: 0
    device_class: energy
    state_class: total
    filters:
      - multiply: 0.1
    on_value:
      then:
        - lambda: id(total_energy_p) += 1;
        - script.execute: check_all_published
  - platform: sml
    id: current_power
    name: Current power
    sml_id: mysml
    obis_code: 1-0:16.7.0
    unit_of_measurement: W
    accuracy_decimals: 1
    device_class: energy
    state_class: measurement
    filters:
      - multiply: 0.1
    on_value:
      then:
        - lambda: id(current_power_p) += 1;
        - script.execute: check_all_published
  - platform: adc
    name: Battery voltage
    id: battery_voltage
    pin: GPIO2
    accuracy_decimals: 2
    update_interval: 1s
    attenuation: 12dB
    filters:
      - multiply: 2.0
    on_value:
      then:
        - lambda: id(battery_voltage_p) += 1;
        - script.execute: check_all_published
uart:
  id: uart_bus
  rx_pin: GPIO21
  baud_rate: 9600
  data_bits: 8
  parity: NONE
  stop_bits: 1
power_supply:
  - id: power_supply1
    pin: GPIO10
    enable_on_boot: true
sml:
  id: mysml
  uart_id: uart_bus
deep_sleep:
  id: deep_sleep_1
mqtt:
  id: mqtt_client
  broker: ${mqtt_broker}
  username: ${mqtt_username}
  password: !secret mqtt_smartmeter_password
  birth_message:
    topic:
    payload:
  will_message:
    topic:
    payload:
  on_message:
    - topic: esphome/ota_mode
      payload: 'ON'
      then:
        - logger.log: 'ota_mode: on'
        - globals.set:
            id: ota_mode
            value: "true"
    - topic: esphome/ota_mode
      payload: 'OFF'
      then:
        - logger.log: 'ota_mode: off'
        - globals.set:
            id: ota_mode
            value: "false"
